{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "erpc",
    "patterns": [{
            "include": "#multilineCommentsDocument"
        }, {
            "include": "#multilineCommentsDocument2"
        },
        {
            "include": "#multilineComments"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#annotations"
        },
        {
            "include": "#enums"
        },
        {
            "include": "#structs"
        },
        {
            "include": "#structsMembers"
        },
        {
            "include": "#members"
        },
        {
            "include": "#typeNames"
        },
        {
            "include": "#functionTypeNames"
        },
        {
            "include": "#returnTypes"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [{
                "name": "keyword.control.erpc",
                "match": "\\b(const|enum|in|inout|interface|oneway|out|program|struct|type)\\b"
            }, {
                "name": "entity.name.type",
                "match": "\\b(binary|bool|uint8|uint16|uint32|int8|int16|int32|void)\\b"
            }, {
                "name": "keyword.other.erpc",
                "match": "[{}(),=\\->;\\[\\]+*/;]"
            }]
        },
        "strings": {
            "name": "string.quoted.double.erpc",
            "begin": "\"",
            "end": "\"",
            "patterns": [{
                "name": "constant.character.escape.erpc",
                "match": "\\\\."
            }]
        },
        "comments": {
            "name": "comment.line.erpc",
            "match": "//.*"
        },
        "multilineCommentsDocument": {
            "name": "comment.block.erpc",
            "begin": "/\\*\\*",
            "end": "\\*/"
        },
        "multilineCommentsDocument2": {
            "name": "comment.block.erpc",
            "begin": "/\\*\\!",
            "end": "\\*/"
        },
        "multilineComments": {
            "name": "comment.block.erpc",
            "begin": "/\\*",
            "end": "\\*/"
        },
        "annotations": {
            "name": "support.property-value.erpc",
            "begin": "@[^\\(]*\\(",
            "end": "\\)",
            "patterns": [{
                "name": "string.quoted.double.erpc",
                "match": "\"[^)]*"
            }, {
                "name": "string.unquoted.erpc",
                "match": "[^\")][^)]*"
            }]
        },
        "enums": {
            "name": "keyword.control.erpc",
            "match": "enum\\s*([a-zA-Z0-9_]+)",
            "captures": {
                "1": {
                    "name": "entity.name.type.erpc"
                }
            }
        },
        "structs": {
            "name": "keyword.control.erpc",
            "match": "struct\\s*([a-zA-Z0-9_]+)",
            "captures": {
                "1": {
                    "name": "entity.name.type.erpc"
                }
            }
        },
        "structsMembers": {
            "name": "variable.name",
            "match": "([a-zA-Z0-9_]*)\\s([a-zA-Z0-9_]*)(;)",
            "captures": {
                "1": {
                    "name": "entity.name.type.erpc"
                },
                "3": {
                    "name": "keyword.other.erpc"
                }
            }
        },
        "typeNames": {
            "name": "keyword.control.erpc",
            "match": "type\\s[^=]*",
            "captures": {
                "0": {
                    "patterns": [{
                        "name": "entity.name.type.erpc",
                        "match": "\\s.*"
                    }]
                }
            }
        },
        "functionTypeNames": {
            "name": "keyword.other.erpc",
            "begin": "\\(",
            "end": "\\)",
            "patterns": [{
                "name": "",
                "match": "(in\\s|out\\s|inout\\s)?([a-zA-Z0-9_\\[\\]]+\\s)([a-zA-Z0-9_]+)",
                "captures": {
                    "1": {
                        "name": "keyword.control.erpc"
                    },
                    "2": {
                        "name": "entity.name.type.erpc"
                    },
                    "3": {
                        "name": "variable.name.erpc"
                    }
                }
            }]
        },
        "returnTypes": {
            "match": "(->)\\s*([a-zA-Z0-9_]*)",
            "captures": {
                "1": {
                    "name": "keyword.other.erpc"
                },
                "2": {
                    "name": "entity.name.type.erpc"
                }
            }
        }
    },
    "scopeName": "source.erpc"
}
