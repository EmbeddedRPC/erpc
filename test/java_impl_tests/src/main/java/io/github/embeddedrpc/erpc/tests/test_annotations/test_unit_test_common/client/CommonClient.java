/** 
 * Generated by erpcgen 1.12.0 on Mon Jan  8 10:25:43 2024.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */
 
package io.github.embeddedrpc.erpc.tests.test_annotations.test_unit_test_common.client;

import io.github.embeddedrpc.erpc.tests.test_annotations.test_unit_test_common.interfaces.ICommon;



import io.github.embeddedrpc.erpc.tests.common.myEnum;

import io.github.embeddedrpc.erpc.auxiliary.MessageType;
import io.github.embeddedrpc.erpc.auxiliary.MessageInfo;
import io.github.embeddedrpc.erpc.auxiliary.RequestContext;
import io.github.embeddedrpc.erpc.auxiliary.Reference;
import io.github.embeddedrpc.erpc.auxiliary.Utils;
import io.github.embeddedrpc.erpc.client.ClientManager;
import io.github.embeddedrpc.erpc.codec.Codec;

import java.util.ArrayList;
import java.util.List;

public class CommonClient implements ICommon {
    private final ClientManager clientManager;

    public CommonClient(ClientManager clientManager) {
        this.clientManager = clientManager;
    }


    @Override
    public void quit() {
        // Create request
        RequestContext request = clientManager.createRequest(true);
        Codec codec = request.codec();

        // Write message info
        codec.startWriteMessage(new MessageInfo(
                MessageType.kOnewayMessage,
                this.SERVICE_ID,
                this.QUIT_ID,
                request.sequence()));

        // Write message data

        // Perform request
        clientManager.performRequest(request);

    }

    @Override
    public int getServerAllocated() {
        // Create request
        RequestContext request = clientManager.createRequest(false);
        Codec codec = request.codec();

        // Write message info
        codec.startWriteMessage(new MessageInfo(
                MessageType.kInvocationMessage,
                this.SERVICE_ID,
                this.GETSERVERALLOCATED_ID,
                request.sequence()));

        // Write message data

        // Perform request
        clientManager.performRequest(request);

        // Read out parameters

        // Read return value
        int _result = codec.readInt32();
        return _result;
    }
}
