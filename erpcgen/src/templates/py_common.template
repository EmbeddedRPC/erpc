{% if mlComment != ""%}
{$mlComment}

{% endif %}
#
# Generated by erpcgen {$erpcVersion} on {$todaysDate}.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
{% for inc in includes %}
import {$inc}
{% endfor -- includes %}
{% if not empty(consts) %}

# Constant variable declarations
{% for c in consts %}
{$>c.mlComment}
{$c.name} = {$c.value}{% if c.ilComment %} {$c.ilComment}{% endif %}
{% endfor -- constants %}
{% endif -- consts %}
{% if not empty(enums) %}

# Enumerators data types declarations
{% for enum in enums %}
{$>(enum.mlComment or enum.ilComment)}
{% if enum.name %}
class {$enum.name}:
{% endif -- anon enum %}
{% for member in enum.members %}
{% if member.mlComment %}
   {$member.mlComment}
{% endif %}
{% if enum.name %}    {% endif %}{$member.name} = {$member.value}{% if member.ilComment %} {$member.ilComment}{% endif %}
{% endfor -- member %}

{% endfor -- enum %}
{% endif -- enums %}

{% if not empty(group.symbolsMap.structs) %}
# Structures data types declarations
{% for s in group.symbolsMap.structs %}
{$>(s.mlComment or s.ilComment)}
class {$s.name}(object):
{% for m in s.members if (m.type.type == 'union' && m.type.isNonEncapsulatedUnion == false) %}
{%   if m.mlComment or m.ilComment %}
   {$m.mlComment or m.ilComment}
{%   endif %}
    class {$m.name}_union(object):
{%   for c in m.type.cases %}
{%    if not c.isVoid %}
        # {% if c.name == "default" %}default case{% else %}case {$c.name or c.value}{% endif %}
{%     for cm in c.members %}
        {$cm.name} = None # {$prettyTypeName(cm.name, cm.type)}
{%     endfor -- union case members %}
{%    endif -- not void %}
{%   endfor -- union cases %}

{% endfor -- members %}
    def __init__(self{% for m in s.members if not m.lengthForMember %}, {$m.name}=None{% endfor %}):
{% for m in s.members if not m.lengthForMember %}
        self.{$m.name} = {$m.name} # {$prettyTypeName(m.name, m.type)}
{% endfor -- members %}

{# create read-only properties for @length counts #}
{% for m in s.members if m.lengthForMember %}
    @property
    def {$m.name}(self):
        return len(self.{$m.lengthForMember})

{% endfor -- s.members %}
    def _read(self, codec):
{% for m in s.members if not m.serializedViaMember %}
{%   set self_m_name = "self." & m.name %}
{%   if m.isNullable %}
        if not codec.read_null_flag():
            {$decodeValue(m.type, self_m_name, "", "codec", "            ", 0)}
        else:
            {$self_m_name} = None
{%   else -- isNullable %}
{%    if (m.type.type == 'union' && m.type.isNonEncapsulatedUnion == true) %}
        {$self_m_name}, self.{$m.discriminator} = common.{$m.type.name}()._read(codec)
{%    else -- isNonEncapsulatedUnion %}
        {$decodeValue(m.type, self_m_name, "", "codec", "        ", 0)}
{%    endif -- isNonEncapsulatedUnion %}
{%   endif -- isNullable %}
{% endfor -- members %}
        return self

    def _write(self, codec):
{% for m in s.members if not m.serializedViaMember %}
{%  set self_m_name = "self." & m.name %}
{%  if m.isNullable %}
        if {$self_m_name} is None:
            codec.write_null_flag(True)
        else:
            codec.write_null_flag(False)
            {$encodeValue(m.type, self_m_name, "codec", "            ", 0)}
{%  else -- isNullable %}
        if {$self_m_name} is None:
            raise ValueError("{$m.name} is None")
{%    if (m.type.type == 'union' && m.type.isNonEncapsulatedUnion == true) %}
        {$m.name}._write(codec, self.{$m.discriminator})
{%    else -- isNonEncapsulatedUnion %}
        {$encodeValue(m.type, self_m_name, "codec", "        ", 0)}
{%    endif -- isNonEncapsulatedUnion %}
{%   endif -- isNullable %}
{% endfor -- members %}

    def __str__(self):
        return "<%s@%x{% for m in s.members if not m.lengthForMember %} {$m.name}=%s{% endfor %}>" % (self.__class__.__name__, id(self){% for m in s.members if not m.lengthForMember %}, self.{$m.name}{% endfor %})

    def __repr__(self):
        return self.__str__()
        
{% endfor -- group.symbolsMap.structs %}
{% endif -- not empty(group.symbolsMap.structs) %}
{% if not empty(group.symbolsMap.unions) %}

# Unions data types declarations
{% for u in group.symbolsMap.unions %}
{$>(u.mlComment or u.ilComment)}
class {$u.name}(object):
{%  for c in u.type.cases %}
{%   if not c.isVoid %}
    # {% if c.name == "default" %}default case{% else %}case {$c.name or c.value}{% endif %}
{%    for cm in c.members %}
    {$cm.name} = None # {$prettyTypeName(cm.name, cm.type)}
{%    endfor -- union case members %}
{%   endif -- not void %}
{%  endfor -- union cases %}

    def _read(self, codec):
        {$decodeValue(u.type, "self", "", "codec", "        ", 0)}
        return self, discriminator

    def _write(self, codec, discriminator):
        {$encodeValue(u.type, "self", "codec", "        ", 0)}

{#    def __str__(self):
        return "<%s@%x{% for m in u.members if not m.lengthForMember %} {$m.name}=%s{% endfor %}>" % (self.__class__.__name__, id(self){% for m in u.members if not m.lengthForMember %}, self.{$m.name}{% endfor %})
#}
    def __repr__(self):
        return self.__str__()

{% endfor -- group.symbolsMap.unions %}
{% endif -- not empty(group.symbolsMap.unions) %}

{% if aliases %}
# Type aliases
{% for a in aliases %}
{$a.name} = {$a.elementType.name}
{% endfor -- aliases %}
{% endif -- aliases %}
