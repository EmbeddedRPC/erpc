{% set source = "client" >%}
{% if mlComment != "" %}
{$mlComment}

{% endif %}
{$commonHeader()}

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include "erpc_port.h"
#endif
#include "{$codecHeader}"
#include "{$clientCppHeaderName}"
#include "erpc_manually_constructed.hpp"

{$checkVersion()}
{$>checkCrc()}
using namespace erpc;
using namespace std;
{$usingNamespace() >}
{$generateCrcVariable()}
{$> setSharedMemAddresses()}
{$> constantsDefinitions(consts)}
{$> symbolHeader(group.symbolsMap.symbolsToServer, "serial", "def")}
{$> symbolSource(group.symbolsMap.symbolsToServer, "serial", "def")}
{$> symbolHeader(group.symbolsMap.symbolsToClient, "deserial", "def")}
{$> symbolSource(group.symbolsMap.symbolsToClient, "deserial", "def")}
{$> symbolHeader(group.symbolsMap.symbolsToServer, "serial", "noSharedMem")}
{$> symbolSource(group.symbolsMap.symbolsToServer, "serial", "noSharedMem")}
{$> symbolHeader(group.symbolsMap.symbolsToClient, "deserial", "noSharedMem")}
{$> symbolSource(group.symbolsMap.symbolsToClient, "deserial", "noSharedMem")}

{% def clientShimCode(client, fn, serverIDName, functionIDName) ------------------------- clientShimCode(fn, serverIDName, functionIDName) %}
{% set clientIndent = "" >%}
{% if generateErrorChecks %}
    erpc_status_t err = kErpcStatus_Success;

{% endif -- generateErrorChecks %}
{% if fn.isReturnValue %}
{%  if fn.needTempVariableClientI32 %}
    int32_t _tmp_local_i32;
{%  endif %}
{% endif %}
{% if fn.needTempVariableClientU16 %}
    uint16_t _tmp_local_u16;
{% endif %}
{% if fn.returnValue.type.isNotVoid %}
    {$fn.returnValue.resultVariable}{% if fn.returnValue.isNullReturnType %} = NULL{% endif %};
{% endif -- isNotVoid %}

#if ERPC_PRE_POST_ACTION
    pre_post_action_cb preCB = {$client}->getPreCB();
    if (preCB)
    {
        preCB();
    }
#endif

    // Get a new request.
{% if !fn.isReturnValue %}
    RequestContext request = {$client}->createRequest(true);
{% else %}
    RequestContext request = {$client}->createRequest(false);
{% endif -- isReturnValue %}

    // Encode the request.
{% if codecClass == "Codec" %}
    {$codecClass} * codec = request.getCodec();
{% else %}
    {$codecClass} * codec = static_cast<{$codecClass} *>(request.getCodec());
{% endif %}

{% if generateAllocErrorChecks %}
{%  set clientIndent = "    " >%}
    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
{% endif -- generateErrorChecks %}
{$clientIndent}    codec->startWriteMessage({% if not fn.isReturnValue %}message_type_t::kOnewayMessage{% else %}message_type_t::kInvocationMessage{% endif %}, {$serverIDName}, {$functionIDName}, request.getSequence());

{% if fn.isSendValue %}
{%  for param in fn.parameters if (param.serializedDirection == "" || param.serializedDirection == OutDirection || param.referencedName != "") %}
{%   if param.isNullable %}
{$ addIndent(clientIndent & "    ", f_paramIsNullableEncode(param))}

{%   else -- isNullable %}
{%    if param.direction != OutDirection %}
{$addIndent(clientIndent & "    ", param.coderCall.encode(param.coderCall))}

{%    endif -- param != OutDirection %}
{%   endif -- isNullable %}
{%  endfor -- fn parameters %}
{% endif -- isSendValue %}
{$clientIndent}    // Send message to server
{$clientIndent}    // Codec status is checked inside this function.
{$clientIndent}    {$client}->performRequest(request);
{% if fn.isReturnValue %}
{%  for param in fn.parametersToClient if (param.serializedDirection == "" || param.serializedDirection == InDirection || param.referencedName != "") %}

{%   if param.isNullable %}
{%    if ((source == "client") && (param.direction != ReturnDirection) && (empty(param.lengthName) == false)) %}
{%     set lengthNameCon = ") && (" & param.lengthName & " != NULL)" >%}
{%    else %}
{%     set lengthNameCon = "" >%}
{%    endif %}
{$clientIndent}    if ({% if lengthNameCon != "" %}({% endif %}{$param.nullableName} != NULL{$lengthNameCon})
{$clientIndent}    {
{$addIndent(clientIndent & "        ", param.coderCall.decode(param.coderCall))}
        }
{%   else -- notNullable %}
{$addIndent(clientIndent & "    ", param.coderCall.decode(param.coderCall))}
{%   endif -- isNullable %}
{%  endfor -- fn parametersToClient %}
{%  if fn.returnValue.type.isNotVoid %}

{%   if fn.returnValue.isNullable %}
{$clientIndent}    bool isNull;
{$addIndent(clientIndent & "    ", f_paramIsNullableDecode(fn.returnValue))}
{%   else -- isNullable %}
{$> addIndent(clientIndent & "    ", allocMem(fn.returnValue.firstAlloc))}
{$addIndent(clientIndent & "    ", fn.returnValue.coderCall.decode(fn.returnValue.coderCall))}
{%   endif -- isNullable %}
{%  endif -- isNotVoid %}
{% endif -- isReturnValue %}
{% if generateErrorChecks %}

{$clientIndent}    err = codec->getStatus();
{% endif -- generateErrorChecks %}
{%    if generateAllocErrorChecks %}
    }
{% endif -- generateAllocErrorChecks %}

    // Dispose of the request.
    {$client}->releaseRequest(request);
{% if generateErrorChecks %}

    // Invoke error handler callback function
    {$client}->callErrorHandler(err, {$functionIDName});
{% endif -- generateErrorChecks %}

#if ERPC_PRE_POST_ACTION
    pre_post_action_cb postCB = {$client}->getPostCB();
    if (postCB)
    {
        postCB();
    }
#endif

{% if generateErrorChecks && fn.returnValue.type.isNotVoid %}
{%  if empty(fn.returnValue.errorReturnValue) == false && fn.returnValue.isNullReturnType == false %}

    if (err != kErpcStatus_Success)
    {
        result = {$fn.returnValue.errorReturnValue};
    }
{%  endif %}
{% endif -- generateErrorChecks %}

    return{% if fn.returnValue.type.isNotVoid %} result{% endif -- isNotVoid %};
{% enddef --------------------------------------------------------------------------------- clientShimCode(fn, serverIDName, functionIDName) %}
{% for iface in group.interfaces %}
{%  for cb in iface.callbacksInt if (count(cb.callbacks) > 1) %}

// Common function for serializing and deserializing callback functions of same type.
static {$cb.callbacksData.prototype};
{% endfor %}
{%  for cb in iface.callbacksInt if (count(cb.callbacks) > 1) %}

// Common function for serializing and deserializing callback functions of same type.
static {$cb.callbacksData.prototype}
{
{$ clientShimCode("m_clientManager", cb.callbacksData, "serviceID", "functionID") >}
}
{% endfor %}

{$iface.clientClassName}::{$iface.clientClassName}(ClientManager *manager)
:m_clientManager(manager)
{
}

{$iface.clientClassName}::~{$iface.clientClassName}()
{
}
{% for fn in iface.functions %}

// {$iface.name} interface {$fn.name} function client shim.
{$fn.prototypeCpp}
{
{%  if fn.isCallback %}
    {% if fn.returnValue.type.isNotVoid %}return {% endif %}{$fn.callbackFName}(m_clientManager, m_serviceId, {$getClassFunctionIdName(fn)}{% for param in fn.parameters %}, {$param.pureName}{% endfor %});
{%  else -- fn.isCallback >%}
{$ clientShimCode("m_clientManager", fn, "m_serviceId", getClassFunctionIdName(fn)) >}
{%  endif -- fn.isCallback >%}
}
{% endfor -- fn %}
{% endfor -- iface %}
