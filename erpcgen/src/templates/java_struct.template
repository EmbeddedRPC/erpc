{% if mlComment != "" %}
{$mlComment}

{% endif %}
/** 
 * Generated by erpcgen {$erpcVersion} on {$todaysDate}.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */ 
package {$groupPackage}.common.structs;

{% if not empty(group.symbolsMap.structs) %}import {$groupPackage}.common.structs.*;{% elif not empty(structs)%}import {$groupPackage}.common.structs.*;{% endif %}
{% if not empty(enums)%}import {$groupPackage}.common.enums.*;{% endif %}
import com.nxp.erpc.auxiliary.Reference;
import com.nxp.erpc.auxiliary.Utils;
import com.nxp.erpc.codec.Codec;

{%  for inc in includes %}
import {$inc};
{%  endfor -- includes %}

import java.util.ArrayList;
import java.util.List;

{% set s = struct %}
{$>(s.mlComment or s.ilComment)}
public class {$s.name}{
{% for m in s.members if not m.lengthForMember %}
{%   if m.mlComment or m.ilComment %}
   {$m.mlComment or m.ilComment}
{%   endif %}
    private {$m.call.type.typeName} {$m.call.name};
{% endfor -- members %}

    public {$s.name} ({% for m in s.members if ((not m.lengthForMember) && (m.call.type.type != 'union' or m.call.type.isNonEncapsulatedUnion)) %}{$m.call.type.typeName} {$m.call.name}{% if !loop.last %}, {% endif %}{% endfor %}) {
{% for m in s.members if not m.lengthForMember %}
        this.{$m.call.name} = {$m.call.name};
{% endfor -- members %}
    }

    public {$s.name}() {
    }

    public void write(Codec codec) {
{% for m in s.members if not m.serializedViaMember %}
{%     if m.isNullable %}
        if(this.{$m.name} == null) {
            codec.writeNullFlag(1);
        } else {
            codec.writeNullFlag(0);
{$          addIndent("            ", m.call.encode(m.call))}
        }
{%     else %}
        Utils.checkNotNull({$m.name}, "{$m.name} is null");
        {% if m.call.isReference%}Utils.checkNotNull({$m.name}.get(), "{$m.name}.value is null");{% endif %}
{$      addIndent("        ", m.call.encode(m.call))}
{%     endif -- isNullable %}
{% endfor -- members %}
    }

    public static {$s.name} read(Codec codec) {
        {$s.name} _struct = new {$s.name}();
{% for m in s.members if not m.serializedViaMember %}
{% set name = m.call.name%}
{% set m.call.name = "_struct." & m.call.name %}
{%     if m.isNullable %}
        if(!codec.readNullFlag()) {
{$         addIndent("            ", m.call.decode(m.call))}
        }
{%     else %}
{$         addIndent("        ", m.call.decode(m.call))}
{%     endif -- isNullable %}
{% set m.call.name = name %}
{% endfor -- members %}
        return _struct;
    }

{% for m in s.members if ((not m.lengthForMember) && (m.call.type.type != 'union' or m.call.type.isNonEncapsulatedUnion)) %}
    public {$m.call.type.typeName} get_{$m.name}() {
        return {$m.name};
    }

    public void set_{$m.name}({$m.call.type.typeName} {$m.name}) {
        this.{$m.name} = {$m.name};
    }
{% endfor %}

{# create read-only properties for @length counts #}
{% for m in s.members if m.lengthForMember %}
    public int {$m.name}() {
        return {$m.lengthForMember}.size();
    }

{% endfor -- s.members %}
}
