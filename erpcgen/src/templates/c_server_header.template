{% if mlComment != ""%}
{$mlComment}

{% endif %}
{$commonHeader()}

#if !defined({$serverGuardMacro})
#define {$serverGuardMacro}

#ifdef __cplusplus
#include "erpc_server.h"
#include "{$codecHeader}"
extern "C"
{
#include "{$commonHeaderName}.h"
#include <stdint.h>
#include <stdbool.h>
}

{$checkVersion()}
{$>checkCrc()}
{% for iface in group.interfaces %}

/*!
 * @brief Service subclass for {$iface.name}.
 */
class {$iface.serviceClassName} : public erpc::Service
{
public:
    {$iface.serviceClassName}() : Service(k{$iface.name}_service_id) {}

    /*! @brief Call the correct server shim based on method unique ID. */
    virtual erpc_status_t handleInvocation(erpc::Md5Hash methodId, uint32_t sequence, erpc::Codec * codec, erpc::MessageBufferFactory *messageFactory);

private:
{%  for fn in iface.functions %}
    /*! @brief Server shim for {$fn.name} of {$iface.name} interface. */
    erpc_status_t {$fn.name}_shim(erpc::{$codecClass} * codec, erpc::MessageBufferFactory *messageFactory, uint32_t sequence);{$loop.addNewLineIfNotLast}
{%  endfor -- fn %}
};
{% endfor -- iface %}

extern "C" {
#else
#include "{$commonHeaderName}.h"
#endif // __cplusplus

typedef void * erpc_service_t;

{% for iface in group.interfaces %}
erpc_service_t create_{$iface.serviceClassName}(void);

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
void destroy_{$iface.serviceClassName}(erpc_service_t *service);
#elif ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_STATIC
void destroy_{$iface.serviceClassName}(void);
#else
#warning "Unknow eRPC allocation policy!"
#endif

{% endfor -- iface %}
#ifdef __cplusplus
}
#endif // __cplusplus

#endif // {$serverGuardMacro}
