{% def decodeBuiltinType(info) --------------- BuiltinType %}
{% if info.builtinType == "kStringType" %}
uint32_t {$info.stringLocalName}_len;
char * {$info.stringLocalName}_local;
codec->readString(&{$info.stringLocalName}_len, &{$info.stringLocalName}_local);
{%  if ((source == "client" && info.withoutAlloc == false) or source == "server") %}
{$info.name} = (char *) erpc_malloc(({$info.stringAllocSize} + 1) * sizeof(char));
{%   if generateAllocErrorChecks == true %}
if ({$info.name} == NULL)
{
    codec->updateStatus(kErpcStatus_MemoryError);
}
else
{
{%   endif -- generateAllocErrorChecks == true %}
{%  endif -- withoutAlloc %}
{%  if (((source == "client" && info.withoutAlloc == false) or source == "server") && generateAllocErrorChecks == true) %}    {%  endif -- withoutAlloc %}memcpy({$info.name}, {$info.stringLocalName}_local, {$info.stringLocalName}_len);
{%  if (((source == "client" && info.withoutAlloc == false) or source == "server") && generateAllocErrorChecks == true) %}    {%  endif -- withoutAlloc %}({$info.name})[{$info.stringLocalName}_len] = 0;
{%  if (((source == "client" && info.withoutAlloc == false) or source == "server") && generateAllocErrorChecks == true) %}
}
{%  endif -- withoutAlloc && generateAllocErrorChecks %}
{% else %}
{%  if source == "client" && info.pointerScalarTypes %}
codec->read({$info.name});
{%  else %}
codec->read(&{$info.name});
{%  endif -- pointerScalarTypes %}
{% endif -- builtinType %}
{% enddef ------------------------------- BuiltinType %}

{% def decodeBinaryType(info) --------------- BinaryType %}
{% if info.hasLengthVariable %}
uint32_t {$info.sizeTemp};
{% endif %}
uint8_t * {$info.dataTemp};
codec->readBinary(&{$info.sizeTemp}, &{$info.dataTemp});
{% if info.hasLengthVariable && not info.constantVariable %}
{%  if info.pointerScalarTypes && source == "client" %}*{% endif %}{$info.size} = {$info.sizeTemp};
{% endif %}
{% if info.maxSize != info.sizeTemp %}
if ({$info.sizeTemp} <= {$info.maxSize})
{
{%   set indent = "    " >%}
{% else %}
{%   set indent = "" >%}
{% endif %}
{% if source == "server" || info.useMallocOnClientSide == true %}
{$indent}{$info.name} = (uint8_t *) erpc_malloc({$info.maxSize} * sizeof(uint8_t));
{%  if generateAllocErrorChecks == true %}
{$indent}if ({$info.name} == NULL)
{$indent}{
{$indent}    codec->updateStatus(kErpcStatus_MemoryError);
{$indent}}
{$indent}else
{$indent}{
{$indent}    memcpy({$info.name}, {$info.dataTemp}, {$info.sizeTemp});
{$indent}}
{%  else -- generateAllocErrorChecks == true %}
{$indent}memcpy({$info.name}, {$info.dataTemp}, {$info.sizeTemp});
{%  endif -- generateAllocErrorChecks == true %}
{% else %}
{$indent}memcpy({$info.name}, {$info.dataTemp}, {$info.sizeTemp});
{% endif %}
{% if info.maxSize != info.sizeTemp %}
}
else
{
    codec->updateStatus(kErpcStatus_Fail);
}
{% endif %}
{% enddef ------------------------------- BinaryType %}

{% def decodeEnumType(info) ---------------- EnumType %}
codec->read(&_tmp_local);
{% if source == "client" && info.pointerScalarTypes %}
*{$info.name} = static_cast<{$info.enumName}>(_tmp_local);
{% else %}
{$info.name} = static_cast<{$info.enumName}>(_tmp_local);
{% endif -- pointerScalarTypes %}
{% enddef ---------------------------------- EnumType %}

{% def decodeListType(info) ------------------- ListType %}
{% if info.useBinaryCoder >%}
{$decodeBinaryType(info) >}
{% else >%}
{%  if info.hasLengthVariable %}
uint32_t {$info.sizeTemp};
{%  endif %}
codec->startReadList(&{$info.sizeTemp});
{%  if info.hasLengthVariable && not info.constantVariable %}
{%   if info.pointerScalarTypes && source == "client" %}*{% endif %}{$info.size} = {$info.sizeTemp};
{%  endif %}
{%  if info.maxSize != info.sizeTemp %}
if ({$info.sizeTemp} <= {$info.maxSize})
{
{%   set indent = "    " >%}
{%  else %}
{%   set indent = "" >%}
{%  endif %}
{%  if source == "server" || info.useMallocOnClientSide == true %}
{$indent}{$info.name} = ({$info.mallocType}) erpc_malloc({$info.maxSize} * sizeof({$info.mallocSizeType}));
{%   if generateAllocErrorChecks == true %}
{$indent}if ({$info.name} == NULL)
{$indent}{
{$indent}    codec->updateStatus(kErpcStatus_MemoryError);
{$indent}}
{%   endif -- generateAllocErrorChecks == true %}
{$      addIndent(indent, decodeArrayType(info))}
{%  else %}
{$addIndent(indent, decodeArrayType(info))}
{%  endif %}
{%  if info.maxSize != info.sizeTemp %}
}
else
{
    codec->updateStatus(kErpcStatus_Fail);
}
{%  endif %}
{% endif >%}
{% enddef ------------------------------------- ListType %}

{% def decodeArrayType(info) -------------- ArrayType %}
{% if codecClass == "BasicCodec" && !empty(info.builtinTypeName) >%}
{$decodeData(info)>}
{% else >%}
for (uint32_t {$info.forLoopCount} = 0; {$info.forLoopCount} < {$info.sizeTemp}; ++{$info.forLoopCount})
{
{$addIndent("    ", info.protoNext.decode(info.protoNext))}
}
{% endif >%}
{% enddef ----------------------------------- ArrayType %}

{% def decodeStructType(info) --------------- StructType %}
{% if info.inDataContainer %}
read_{$info.typeName}_struct(codec, &({$info.name}));
{% else -- not inDataContainer %}
read_{$info.typeName}_struct(codec, {$info.name});
{% endif -- inDataContainer %}
{% enddef -------------------------- StructType %}

{% def decodeUnionParamType(info) --------------- UnionParamType %}
{% if info.inDataContainer %}
{%  if info.castDiscriminator %}
read_{$info.typeName}_union(codec, &_tmp_local, &{$info.name});
{%   if !info.isConstant %}
{$info.dataLiteral}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{%   endif %}
{%  else %}
read_{$info.typeName}_union(codec, &{$info.dataLiteral}{$info.discriminatorName}, &{$info.name});
{%  endif -- castDiscriminator%}
{% else -- not inDataContainer %}
{%  if info.castDiscriminator %}
read_{$info.typeName}_union(codec, &_tmp_local, {$info.name});
{%   if !info.isConstant %}
{%    if info.discrimPtr == true && source == "client" %}*{% endif %}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{%   endif %}
{%  else %}
read_{$info.typeName}_union(codec, {% if info.discrimPtr == false || source != "client" %}&{% endif %}{$info.discriminatorName}, {$info.name});
{%  endif  -- castDiscriminator%}
{% endif -- inDataContainer %}
{% enddef -------------------------- UnionParamType %}

{% def decodeUnionType(info) ---------------- %}
codec->startReadUnion({% if info.castDiscriminator %}{% if info.dataLiteral != "" %}&{% endif %}_tmp_local{% else %}{% if info.dataLiteral != "" %}&{$info.dataLiteral}{% endif %}{$info.discriminatorName}{% endif %});
{% if info.castDiscriminator %}
{$info.dataLiteral}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{% endif -- info.castDiscriminator %}
switch ({% if info.dataLiteral != "" %}{$info.dataLiteral}{% else %}*{% endif %}{$info.discriminatorName})
{
{% for case in info.cases %}
{%  if case.name == "default" %}
    default:
{%  else %}
    case {% if case.name != "" %}{$case.name}{% else %}{$case.value}{%  endif %}:
{%  endif -- default or case %}
    {
{%  for member in case.members %}
{% if source == "server" %}
{$> addIndent("        ", allocMem(member.coderCall.memberAllocation))}
{% endif %}
{$> addIndent("        ", member.coderCall.decode(member.coderCall))}
{%  endfor -- members %}
        break;
    }
{% endfor -- cases %}
}
{% enddef -------------------------- UnionType %}

{% def decodeFunctionType(info) %}
{% if info.callbacksCount == 1 %}
codec->readCallback((funPtr)({$info.callbacks}), (funPtr *)(&{$info.name}));
{% else -- info.callbacksCount == 1 %}
codec->readCallback((arrayOfFunPtr)({$info.callbacks}), {$info.callbacksCount}, (funPtr *)(&{$info.name}));
{% endif -- info.callbacksCount == 1 %}
{% enddef -------------------------- FunctionType %}

{% def decodeSharedType(info) %}
codec->readPtr(reinterpret_cast<uintptr_t *>({% if not ((info.funcParam == true && info.InoutOutDirection == true) && source == "client") %}&{%  endif %}{$info.name}));
{% if info.sharedType != "" %}
{%  if info.sharedType == "struct" %}
{%   if info.inDataContainer %}
read_{$info.sharedType}_struct_shared(codec, &({$info.name}));
{%   else -- not inDataContainer %}
read_{$info.sharedType}_struct_shared(codec, {$info.name});
{%   endif -- inDataContainer %}
{%  else %}
{%   if info.inDataContainer %}
{%    if info.castDiscriminator %}
read_{$info.sharedType}_union_shared(codec, &_tmp_local, &{$info.name});
{$info.dataLiteral}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{%    else %}
read_{$info.sharedType}_union_shared(codec, &{$info.dataLiteral}{$info.discriminatorName}, &{$info.name});
{%    endif -- castDiscriminator%}
{%   else -- not inDataContainer %}
{%    if info.castDiscriminator %}
read_{$info.sharedType}_union_shared(codec, &_tmp_local, {$info.name});
{%     if info.discrimPtr == true && source == "client" %}*{% endif %}{$info.discriminatorName} = static_cast<{$info.discriminatorType}>(_tmp_local);
{%    else %}
read_{$info.sharedType}_union_shared(codec, {% if info.discrimPtr == false || source != "client" %}&{% endif %}{$info.discriminatorName}, {$info.name});
{%    endif  -- castDiscriminator%}
{%   endif -- inDataContainer %}
{%  endif%}
{% endif%}
{% enddef -------------------------- SharedType %}

{% def decodeData(info) -------------------%}
codec->readData({$info.name}, {$info.sizeTemp} * sizeof({$info.builtinTypeName}));
{% enddef --------------------------------------- decodeData %}
{# ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#}


{# Encode sending data #}
{% def encodeBuiltinType(info) -----------------  %}
{% if info.builtinType == "kStringType" %}
codec->writeString(strlen({$info.name}), {$info.name});
{% else %}
{%  if source == "client" && info.pointerScalarTypes %}
codec->write(*{$info.name});
{%  else %}
codec->write({$info.name});
{%  endif -- pointerScalarTypes %}
{% endif -- builtinType %}
{% enddef --------------------------------------- BuiltinType %}

{% def encodeBinaryType(info) -----------------  %}
codec->writeBinary({% if source == "client" && info.pointerScalarTypes %}*{% endif %}{$info.size}, {$info.name});
{% enddef --------------------------------------- BinaryType %}

{% def encodeEnumType(info) ---------------------%}
{% if source == "client" && info.pointerScalarTypes %}
codec->write(static_cast<int32_t>(*{$info.name}));
{% else %}
codec->write(static_cast<int32_t>({$info.name}));
{% endif -- pointerScalarTypes %}
{% enddef --------------------------------------- Enum %}

{% def encodeListType(info) ---------------------------%}
{% if info.useBinaryCoder >%}
{$encodeBinaryType(info)>}
{% else >%}
codec->startWriteList({% if source == "client" && info.pointerScalarTypes %}*{% endif %}{$info.size});
{$encodeArrayType(info)) >}
{% endif >%}
{% enddef ------------------------------------ ListType %}

{% def encodeArrayType(info) --------------------- %}
{% if codecClass == "BasicCodec" && !empty(info.builtinTypeName) >%}
{$encodeData(info) >}
{% else >%}
for (uint32_t {$info.forLoopCount} = 0; {$info.forLoopCount} < {% if source == "client" && info.pointerScalarTypes %}*{% endif %}{$info.size}; ++{$info.forLoopCount})
{
{$addIndent("    ", info.protoNext.encode(info.protoNext))}
}
{% endif >%}
{% enddef --------------------------------------- ArrayType %}

{% def encodeStructType(info) -------------------%}
{% if info.inDataContainer %}
write_{$info.typeName}_struct(codec, &({$info.name}));
{% else -- not inDataContainer %}
write_{$info.typeName}_struct(codec, {$info.name});
{% endif -- inDataContainer %}
{% enddef --------------------------------------- StructType %}

{% def encodeUnionParamType(info) --------------- UnionParamType %}
{% if info.inDataContainer %}
write_{$info.typeName}_union(codec, {% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{$info.dataLiteral}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %}, &{$info.name});
{% else -- not inDataContainer %}
write_{$info.typeName}_union(codec, {% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{% if info.discrimPtr == true && source == "client" %}*{% endif %}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %}, {$info.name});
{% endif -- inDataContainer %}
{% enddef -------------------------- UnionParamType %}

{% def encodeUnionType(info) ---------------- %}
codec->startWriteUnion({% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{$info.dataLiteral}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %});
switch ({$info.dataLiteral}{$info.discriminatorName})
{
{% for case in info.cases %}
{%  if case.name == "default" %}
    default:
{%  else %}
    case {% if case.name != "" %}{$case.name}{% else %}{$case.value}{% endif %}:
{%  endif -- default or case %}
    {
{%  for member in case.members %}
{$> addIndent("        ", member.coderCall.encode(member.coderCall))}
{%  endfor -- members %}
        break;
    }
{% endfor -- cases %}
}
{% enddef -------------------------- UnionType %}

{% def encodeFunctionType(info) %}
{% if info.callbacksCount == 1 %}
codec->writeCallback((funPtr)({$info.callbacks}), (funPtr)({$info.name}));
{% else -- info.callbacksCount == 1 %}
codec->writeCallback((arrayOfFunPtr)({$info.callbacks}), {$info.callbacksCount}, (funPtr)({$info.name}));
{% endif -- info.callbacksCount == 1 %}
{% enddef -------------------------- FunctionType %}

{% def encodeSharedType(info) %}
{% if sharedMemBeginAddr != "" %}
if ({$info.name} >= ERPC_SHARED_MEMORY_BEGIN && {$info.name} <= ERPC_SHARED_MEMORY_END)
{
    codec->writePtr(reinterpret_cast<uintptr_t>({%if source == "client" && info.InoutOutDirection %}*{%endif%}{$info.name}));
}
else
{
    codec->updateStatus(kErpcStatus_MemoryError);
}
{% else %}
codec->writePtr(reinterpret_cast<uintptr_t>({%if source == "client" && info.InoutOutDirection %}*{%endif%}{$info.name}));
{% endif %}
{% if info.sharedType != "" %}
{%  if info.sharedType == "struct" %}
{%   if info.inDataContainer %}
write_{$info.typeName}_struct(codec, &({$info.name}));
{%   else -- not inDataContainer %}
write_{$info.typeName}_struct(codec, {$info.name});
{%   endif -- inDataContainer %}
{%  else %}
{%   if info.inDataContainer %}
write_{$info.typeName}_union_shared(codec, {% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{$info.dataLiteral}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %}, &{$info.name});
{%   else -- not inDataContainer %}
write_{$info.typeName}_union_shared(codec, {% if info.castDiscriminator %}static_cast<int32_t>({% endif %}{% if info.discrimPtr == true && source == "client" %}*{% endif %}{$info.discriminatorName}{% if info.castDiscriminator %}){% endif %}, {$info.name});
{%   endif -- inDataContainer %}
{%  endif%}
{% endif%}
{% enddef -------------------------- SharedType %}

{% def encodeData(info) -------------------%}
codec->writeData({$info.name}, {% if source == "client" && info.pointerScalarTypes %}*{% endif %}{$info.size} * sizeof({$info.builtinTypeName}));
{% enddef --------------------------------------- encodeData %}
