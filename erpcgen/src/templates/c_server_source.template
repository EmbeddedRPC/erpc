{% if mlComment != "" %}
{$mlComment}

{% endif %}
{$commonHeader()}
{% set source = "server" >%}

#include <new>
#include "{$serverCHeaderName}"
#include "{$serverCppHeaderName}"
#include "erpc_manually_constructed.hpp"
{% set utils = false >%}
{% for iface in group.interfaces %}
{%  if (count(iface.callbacksAll) > 0) && (utils == false) %}
#include "erpc_utils.hpp"
{%   set utils = true >%}
{%  endif %}
{% endfor %}

using namespace erpc;
using namespace std;
{$usingNamespace() >}
{% for iface in group.interfaces %}
{%  if count(iface.callbacksAll) > 0 %}

{%   for cb in iface.callbacksAll %}
static const {$cb.name} _{$cb.name}[{$count(cb.callbacks)}] = { {%    for c in cb.callbacks %}{$c.name}{%     if !loop.last %}, {%     endif -- loop.last %}{%    endfor -- f.callbacks %} };
{%   endfor %}
{%  endif %}
{% endfor %}
{% for iface in group.interfaces %}

class {$iface.serverClassName}: public {$iface.interfaceClassName}
{
    public:
        virtual ~{$iface.serverClassName}() {};

{%  for fn in iface.functions %}

        {$fn.prototypeInterface}
        {
{%   if count(fn.callbackParameters) > 0 %}
            uint16_t _fnIndex;
{%    for cb in fn.callbackParameters%}
            ::{$cb.type} _{$cb.name} = NULL;
{%    endfor %}
{%   endif %}
{%   if fn.returnValue.type.isNotVoid %}
            {$fn.returnValue.resultVariable}{% if fn.returnValue.isNullReturnType %} = NULL{% endif %};
{%   endif %}
{%   if count(fn.callbackParameters) > 0 %}
{%    for cb in fn.callbackParameters if cb.in %}

            if ({% if cb.interface != ""%}{$cb.interface}{% else %}{$iface.interfaceClassName}{% endif %}::get_callbackIdx_{$cb.type}(&{$cb.name}, _fnIndex))
            {
                _{$cb.name}=::_{$cb.type}[_fnIndex];
            }
{%    endfor %}

{%   endif%}
            {% if fn.returnValue.type.isNotVoid %}result = {% endif %}::{$fn.name}({% for param in fn.parameters %}{% if !loop.first %}, {% endif %}{$param.pureNameC}{% endfor %});
{%   for cb in fn.callbackParameters if cb.out %}

            if (findIndexOfFunction((arrayOfFunctionPtr_t)::_{$cb.type}, sizeof(::_{$cb.type})/sizeof(::{$cb.type}), (functionPtr_t)_{$cb.name}, _fnIndex))
            {
                {% if cb.interface != ""%}{$cb.interface}{% else %}{$iface.interfaceClassName}{% endif %}::get_callbackAddress_{$cb.type}(_fnIndex, {$cb.name});
            }
{%   endfor %}
{%   if fn.returnValue.type.isNotVoid %}

            return result;
{%   endif %}
        }
{%  endfor -- fn %}
};

ERPC_MANUALLY_CONSTRUCTED_STATIC({$iface.serviceClassName}, s_{$iface.serviceClassName});
ERPC_MANUALLY_CONSTRUCTED_STATIC({$iface.serverClassName}, s_{$iface.serverClassName});

erpc_service_t create_{$iface.serviceClassName}(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) {$iface.serviceClassName}(new (nothrow){$iface.serverClassName}());
#else
    if (s_{$iface.serviceClassName}.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_{$iface.serverClassName}.construct();
        s_{$iface.serviceClassName}.construct(s_{$iface.serverClassName}.get());
        service = s_{$iface.serviceClassName}.get();
    }
#endif

    return service;
}

void destroy_{$iface.serviceClassName}(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (service)
    {
        delete ({$iface.serverClassName} *)((({$iface.serviceClassName} *)service)->getHandler());
        delete ({$iface.serviceClassName} *)service;
    }
#else
    (void)service;
    erpc_assert(service == s_{$iface.serviceClassName}.get());
    s_{$iface.serviceClassName}.destroy();
    s_{$iface.serverClassName}.destroy();
#endif
}

{% endfor -- iface %}
