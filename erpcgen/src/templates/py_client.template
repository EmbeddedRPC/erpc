{% if mlComment != "" %}
{$mlComment}

{% endif %}
#
# Generated by erpcgen {$erpcVersion} on {$todaysDate}.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface
{% if groupNames %}
# import callbacks declaration from other groups
{% for name in groupNames if name != group.name %}
from ..{$outputFilename}_{$name} import interface as interface_{$name}
{% endfor %}
{% endif %}

{% if functions %}
{%  for f in functions %}
{%   if count(f.callbacks) > 1 %}
_{$f.name} = [ {%    for c in f.callbacks %}{$c.name}{%     if !loop.last %}, {%     endif -- loop.last %}{%    endfor -- f.callbacks %} ]
{%   endif -- f.callbacks.size() %}
{%  endfor -- functions %}

{%  endif -- functions %}
{% for iface in group.interfaces %}
# Client for {$iface.name}
class {$iface.name}Client(interface.I{$iface.name}):
    def __init__(self, manager):
        super({$iface.name}Client, self).__init__()
        self._clientManager = manager

{% for fn in iface.functions %}
    def {$fn.prototype}:
{% for p in fn.outParameters if not p.serializedViaMember %}
        assert type({$p.name}) is erpc.Reference, "{$p.direction} parameter must be a Reference object"
{% endfor -- outParams %}
{% if fn.outParameters %}

{% endif %}
        # Build remote function invocation message.
        request = self._clientManager.create_request({% if fn.isOneway %}isOneway=True{% endif %})
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.{% if fn.isReturnValue %}kInvocationMessage{% else %}kOnewayMessage{% endif %},
                service=self.SERVICE_ID,
                request=self.{$upper(fn.name)}_ID,
                sequence=request.sequence))
{% for p in fn.inParameters if not p.serializedViaMember %}
{%  if p.direction == "in" %}
{%   set p_name = p.name %}
{%  else %}
{%   set p_name = p.name & ".value" %}
{%  endif -- dir %}
{%  if p.isNullable %}
{%   set indent = "    " >%}
        codec.write_null_flag({$p_name} is None)
        if {$p_name} is not None:
{%  else -- isNullable %}
{%   set indent = "" >%}
        if {$p_name} is None:
            raise ValueError("{$p_name} is None")
{%  endif -- isNullable %}
        {$indent}{$encodeValue(p.type, p_name, "codec", indent & "        ", 0)}
{% endfor -- inParams %}

        # Send request{% if not fn.isOneway %} and process reply{% endif %}.
        self._clientManager.perform_request(request)
{% if not fn.isOneway %}
{% for p in fn.outParameters if not p.serializedViaMember %}
{%  set indent = "" >%}
{%  if p.isNullable %}
        if {$p.name}.value != None:
{%           set indent = "    " >%}
{%  endif -- isNullable %}
        {$indent}{$decodeValue(p.type, (p.name & ".value"), "common.", "codec", indent & "        ", 0)}
{% endfor -- outParams %}
{% if fn.isReturnValue && fn.returnValue.type.type != "void" %}
        {$decodeValue(fn.returnValue.type, "_result", "common.", "codec", "        ", 0)}
{% endif %}
{% if fn.isReturnValue && fn.returnValue.type.type != "void" %}
        return _result
{% endif %}
{% endif -- oneway %}

{% endfor -- fn %}

{% endfor -- iface %}
