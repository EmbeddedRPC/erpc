---
name: allowed
desc: client and server erros checks allowed
params:
  type:
    - [bool, "false"]
    - [int8, "-1"]
    - [uint8, "0xFFU"]
    - [float, "-1"]
    - [string, "NULL"]
    - [A, "NULL"]
    - [B, "(B) -1"]
idl: |
  struct A{
      int32 a;
  }

  enum B { one }

  interface ErrorTest{
      f() -> {type[0]}
  }
test_client.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - if (codec == NULL)
  - err = kErpcStatus_MemoryError;
  - codec->startWriteMessage
  - m_clientManager->performRequest
  - err = codec->getStatus();
  - m_clientManager->callErrorHandler(err,
  - if: type[1] != 'NULL'
    then:
      - if (err != kErpcStatus_Success)
      - return

test_server.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - err = codec->getStatus();
  - if (err == kErpcStatus_Success)
  - f();
  - err = messageFactory->prepareServerBufferForSend
  - if (err == kErpcStatus_Success)
  - codec->startWriteMessage
  - err = codec->getStatus();
  - return err;

---
name: not allowed
desc: client and server erros checks forbidden
params:
  type:
    - [bool, "false", ""]
    - [int8, "-1", ""]
    - [uint8, "0xFFU", ""]
    - [float, "-1", ""]
    - [string, "NULL", "@max_length(10)"]
    - [A, "NULL", ""]
    - [B, "(B) -1", ""]
  dir:
    - "in"
    - "out"

idl: |
  @no_infra_errors
  @no_alloc_errors
  program test
  struct A{
      int32 a;
  }

  enum B { one }

  interface ErrorTest{
      f({dir} {type[0]} variable {type[2]}) -> {type[0]}
  }
test_client.cpp:
  - not: "!err"
  - not: "(err != kErpcStatus_Success)"
  - not: err =
  - not: if (codec == NULL)
  - not: codec->getStatus()

test_server.cpp:
  - not: "!err"
  - not: err =
  - not: "(err != kErpcStatus_Success)"
  - return codec->getStatus()

---
name: infra allowed
desc: client and server infra erros checks allowed
params:
  type:
    - [bool, "false"]
    - [int8, "-1"]
    - [uint8, "0xFFU"]
    - [float, "-1"]
    - [string, "NULL"]
    - [A, "NULL"]
    - [B, "(B) -1"]
idl: |
  @no_alloc_errors
  program test
  struct A{
      int32 a;
  }

  enum B { one }

  interface ErrorTest{
      f() -> {type[0]}
  }
test_client.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - not: if (result == NULL)
  - not: codec->updateStatus;
  - codec->startWriteMessage
  - m_clientManager->performRequest
  - err = codec->getStatus();
  - m_clientManager->callErrorHandler(err, m_fId)
  - if: type[1] != 'NULL'
    then:
      - if (err != kErpcStatus_Success)

test_server.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - not: if (result == NULL)
  - err = codec->getStatus();
  - if (err == kErpcStatus_Success)
  - f();
  - err = messageFactory->prepareServerBufferForSend
  - if (err == kErpcStatus_Success)
  - codec->startWriteMessage
  - err = codec->getStatus();
  - return err;

---
name: alloc allowed
desc: client and server allocations erros checks allowed
params:
  type:
    - [bool, "false"]
    - [int8, "-1"]
    - [uint8, "0xFFU"]
    - [float, "-1"]
    - [string, "NULL"]
    - [A, "NULL"]
    - [B, "(B) -1"]
idl: |
  @no_infra_errors
  program test
  struct A{
      int32 a;
  }

  enum B { one }

  interface ErrorTest{
      f() -> {type[0]}
  }

test_client.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - if (codec == NULL)
  - err = kErpcStatus_MemoryError;
  - codec->startWriteMessage
  - m_clientManager->performRequest
  - err = codec->getStatus();
  - m_clientManager->callErrorHandler(err,
  - if: type[1] != 'NULL'
    then:
      - if (err != kErpcStatus_Success)
      - return

test_server.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - err = codec->getStatus();
  - if (err == kErpcStatus_Success)
  - f();
  - err = messageFactory->prepareServerBufferForSend
  - if (err == kErpcStatus_Success)
  - codec->startWriteMessage
  - err = codec->getStatus();
  - return err;

---
name: allowed in_out_inout
desc: set default return value when errors occur in client shim
params:
  type:
    - [bool, "false", ""]
    - [int8, "-1", ""]
    - [uint8, "0xFFU", ""]
    - [float, "-1", ""]
    - [string, "NULL", "@max_length(10)"]
    - [A, "NULL", ""]
    - [B, "(B) -1", ""]
  dir:
    - "in"
    - "out"
    - "inout"
idl: |
  struct A{
      int32 a;
  }

  enum B { one }

  interface ErrorTest{
      f({dir} {type[0]} variable {type[2]}) -> void
  }
test_client.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - if (codec == NULL)
  - err = kErpcStatus_MemoryError;
  - codec->startWriteMessage
  - m_clientManager->performRequest
  - err = codec->getStatus();

test_server.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - err = codec->getStatus();
  - if (err == kErpcStatus_Success)
  - f(
  - err = messageFactory->prepareServerBufferForSend
  - if (err == kErpcStatus_Success)
  - codec->startWriteMessage
  - err = codec->getStatus();
  - return err;

---
name: infra allowed in_out_inout
desc: set default return value when errors occure in client shim
params:
  type:
    - [bool, "false", ""]
    - [int8, "-1", ""]
    - [uint8, "0xFFU", ""]
    - [float, "-1", ""]
    - [string, "NULL", "@max_length(10)"]
    - [A, "NULL", ""]
    - [B, "(B) -1", ""]
  dir:
    - "in"
    - "out"
    - "inout"
idl: |
  @no_alloc_errors
  program test
  struct A{
      int32 a;
  }

  enum B { one }

  interface ErrorTest{
      f({dir} {type[0]} variable {type[2]}) -> void
  }
test_client.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - not: if (codec == NULL)
  - not: err = kErpcStatus_MemoryError;
  - codec->startWriteMessage
  - m_clientManager->performRequest
  - err = codec->getStatus();
  - m_clientManager->callErrorHandler(err,

test_server.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - not: if (variable == NULL)
  - err = codec->getStatus();
  - if (err == kErpcStatus_Success)
  - f(
  - if: dir in ('out', 'inout')
    then:
      - if (err == kErpcStatus_Success)
      - codec->startWriteMessage
      - err = codec->getStatus();
  - return err;

---
name: alloc allowed in_out_inout
desc: set default return value when errors occure in client shim
params:
  type:
    - [bool, "false", ""]
    - [int8, "-1", ""]
    - [uint8, "0xFFU", ""]
    - [float, "-1", ""]
    - [string, "NULL", "@max_length(10)"]
    - [A, "NULL", ""]
    - [B, "(B) -1", ""]
  dir:
    - "in"
    - "out"
    - "inout"
idl: |
  @no_infra_errors
  program test
  struct A{
      int32 a;
  }

  enum B { one }

  interface ErrorTest{
      f({dir} {type[0]} variable {type[2]}) -> void
  }
test_client.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - if (codec == NULL)
  - err = kErpcStatus_MemoryError;
  - else
  - codec->startWriteMessage
  - m_clientManager->performRequest(request);
  - err = codec->getStatus();
  - m_clientManager->releaseRequest(request);
  - m_clientManager->callErrorHandler(err, m_fId);

test_server.cpp:
  - erpc_status_t err = kErpcStatus_Success;
  - err = codec->getStatus();
  - if (err == kErpcStatus_Success)
  - err = messageFactory->prepareServerBufferForSend
  - if (err == kErpcStatus_Success)
  - return err;
