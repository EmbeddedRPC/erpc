---
name: error_return c none
desc: set default return value when errors occure in client shim
params:
  type:
    - [bool, "false"]
    - [int8, "-1"]
    - [int16, "-1"]
    - [int32, "-1"]
    - [int64, "-1"]
    - [uint8, "0xFFU"]
    - [uint16, "0xFFFFU"]
    - [uint32, "0xFFFFFFFFU"]
    - [uint64, "0xFFFFFFFFFFFFFFFFU"]
    - [float, "-1"]
    - [double, "-1"]
    - [string, "NULL"]
    - [A, "NULL"]
    - [B, "(B) -1"]
idl: |
    struct A{
        int32 a;
    }

    enum B { one }

    interface ErrorTest{
        f() -> {type[0]}
    }
test_client.cpp:
  - g_client->releaseRequest(request);
  - if: type[1] != 'NULL'
    then:
      - if (err)
      - '{'
      - return {type[1]};
      - '}'

---
name: error_return c set errors
desc: set default return value when errors occure in client shim
params:
  type:
    - [bool, "true", "true"]
    - [bool, "false", "false"]
    - [int8, "-3", "-3" ]
    - [int16, "-5", "-5"]
    - [int32, "10", "10"]
    - [int64, "-1", "-1"]
    - [uint8, "0xFU", "15U"]
    - [uint16, "0xFFEFU", "65519U"]
    - [uint32, "0xFFF44FFFU", "4294201343U"]
    - [uint64, "0xFFF44FFFFFF44FFFUL", "18443454334918479871U"]
    - [float, "25.6", "25.6"]
    - [double, "-32.1", "-32.1"]
    - [string, "errVal", "(char *) errVal"]
    - [A, "\"NULL\"", "NULL"]
    - [B, "one", "one"]
idl: |
    struct A{
        int32 a;
    }

    const string errVal = "error";

    enum B { one }

    interface ErrorTest{
        @error_return({type[1]})
        f() -> {type[0]}
    }
test_client.cpp:
  - g_client->releaseRequest(request);
  - if: type[0] != 'A' and type[0] != 'string'
    then:
      - if (err)
      - '{'
      - return {type[2]};
      - '}'
