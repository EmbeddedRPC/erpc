{% if !preceding_comment.is_empty() -%}
{{ preceding_comment -}}
{% endif ~%}

#
# Generated by erpcgen {{ crate::ERPC_VERSION_STR }} on {{ date }}.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface
{%  if groups.len() > 1 ~%}
# import callbacks declaration from other groups
{%      for name in groups -%}
{%          if name.clone() != group ~%}
from ..{% if !output.is_empty() %}{{ output }}_{% endif %}{{ name }} import interface as interface_{{ name }}
{%-         endif -%}
{%      endfor -%}
{%  endif -%}

{%  if !callbacks.is_empty() -%}
{%      for callback in callbacks ~%}
_{{ callback.name }} = [ {% for function in callback.functions %}{{ function }}{% if !loop.last %}, {% endif %}{% endfor %} ]
{%      endfor -%}
{%  endif -%}
{%  for interface in interfaces %}
# Client for {{ interface.name }}
class {{ interface.name }}Client(interface.I{{ interface.name }}):
    def __init__(self, manager):
        super({{ interface.name }}Client, self).__init__()
        self._clientManager = manager
{%  for function in interface.functions %}
    def {{ self::format_function_prototype_py(function) }}:
{%-     for parameter in function.parameters -%}
{%          if parameter.is_out() && parameter.is_length_for.is_none() && parameter.is_discriminator.is_none() %}
        assert type({{ parameter.name }}) is erpc.Reference # {{ parameter.direction }} parameter must be a Reference object
{%-         endif -%}
{%      endfor  %}
        # Build remote function invocation message.
        request = self._clientManager.create_request({% if function.is_oneway %}isOneway=True{% endif %})
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.{% if function.is_oneway %}kOnewayMessage{% else %}kInvocationMessage{% endif %},
                service=self.SERVICE_ID,
                request=self.{{ function.name|upper }}_ID,
                sequence=request.sequence))
{%      for parameter in function.parameters -%}
{%          if parameter.is_in() && parameter.is_length_for.is_none() && parameter.is_discriminator.is_none() -%}
{%              let indent = self::optional_indent(parameter.is_nullable) -%}
{%              let formatted_name = self::format_param_name(parameter.name, parameter.direction) -%}
{%              if parameter.is_nullable %}
        codec.write_null_flag({{ formatted_name }} is None)
        if {{ formatted_name }} is not None:
{%-             else %} 
        if {{ formatted_name }} is None:
            raise ValueError("{{ formatted_name }} is None")
{%-            endif %}
        {{ indent }}{{ self::encode_type(parameter.type_.clone(), formatted_name, "common.", parameter.discriminator_name.clone(), "codec", indent, 0)|indent(8) -}}
{%          endif -%}
{%      endfor  %}

        # Send request {% if !function.is_oneway %} and process reply{% endif %}.
        self._clientManager.perform_request(request)
{%-     if !function.is_oneway -%}
{%          for parameter in function.parameters -%}
{%              if parameter.is_out() && parameter.is_length_for.is_none() && parameter.is_discriminator.is_none() -%}
{%                  let indent = self::optional_indent(parameter.is_nullable) -%}
{%                  let formatted_name = self::format_param_name(parameter.name, parameter.direction) -%}
{%                  if parameter.is_nullable %}
        if {{ formatted_name }} != None:
{%-                 endif %}
        {{ indent }}{{ self::decode_type(parameter.type_.clone(), formatted_name, "common.", parameter.discriminator_name.clone(), "codec", indent, 0)|indent(8) -}}
{%              endif -%}
{%          endfor -%}
{%      endif -%}
{%      if function.return_type.is_some() %}
        {{ self::decode_type(function.return_type.clone().expect("Return type must be set"), "_result", "common.", Some(String::from("").clone()), "codec", "", 0)|indent(8) }}
        return _result
{%-     endif %}
{%  endfor -%}
{%  endfor -%}