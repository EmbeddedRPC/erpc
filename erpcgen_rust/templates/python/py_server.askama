{% if !preceding_comment.is_empty() -%}
{{ preceding_comment -}}
{% endif ~%}

#
# Generated by erpcgen {{ crate::ERPC_VERSION_STR }} on {{ date }}.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface
{%-  if !includes.is_empty() -%}
{%      for inc in includes ~%}
from . import {{ inc }}
{%-     endfor  %}
{%  endif -%}

{%  if !callbacks.is_empty() ~%}
{%      for callback in callbacks ~%}
_{{ callback.name }} = [ {% for function in callback.functions %}{{ function }}{% if !loop.last %}, {% endif %}{% endfor %} ]
{%      endfor -%}
{%  endif -%}
{%  for interface in interfaces %}
# Client for {{ interface.name }}
class {{ interface.name }}Service(erpc.server.Service):
    def __init__(self, handler):
        super({{ interface.name }}Service, self).__init__(interface.I{{ interface.name }}.SERVICE_ID)
        self._handler = handler
        self._methods = {
{%- for function in interface.functions %}
                interface.I{{ interface.name }}.{{ function.name|upper }}_ID: self._handle_{{ function.name }},
{%- endfor %}
            }
{%  for function in interface.functions %}
    def _handle_{{ function.name }}(self, sequence, codec):
{%-     if function.has_out_parameters() %}
        # Create reference objects to pass into handler for out/inout parameters.
{%-         for parameter in function.parameters -%}
{%              if parameter.is_out() && parameter.is_length_for.is_none() && parameter.is_discriminator.is_none() %}
        {{ parameter.name }} = erpc.Reference()
{%-             endif -%}
{%          endfor -%}
{%      endif %}
{%      for parameter in function.parameters -%}
{%          if parameter.is_in() && parameter.is_length_for.is_none() && parameter.is_discriminator.is_none() -%}
{%              let indent = self::optional_indent(parameter.is_nullable) -%}
{%              let formatted_name = self::format_param_name(parameter.name, parameter.direction) -%}
{%              if parameter.is_nullable %}
        if codec.read_null_flag():
            {{ parameter.name }} = None
        else:
        if {{ formatted_name }} is not None:
{%-             endif %}
        {{ indent }}{{ self::decode_type(parameter.type_.clone(), formatted_name, "common.", parameter.discriminator_name.clone(), "codec", indent, 0)|indent(8) -}}
{%          endif -%}
{%      endfor  %}
        # Invoke user implementation of remote function.
        {% if function.return_type.is_some() %}_result = {% endif %}self._handler.{{ function.name }}({{ self::format_inner_parameters_py(function) }})
{%-     if !function.is_oneway %}

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.I{{ interface.name }}.SERVICE_ID,
            request=interface.I{{ interface.name }}.{{ function.name|upper }}_ID,
            sequence=sequence))
{%          for parameter in function.parameters -%}
{%              if parameter.is_out() && parameter.is_length_for.is_none() && parameter.is_discriminator.is_none() -%}
{%                  let indent = self::optional_indent(parameter.is_nullable) -%}
{%                  let formatted_name = self::format_param_name(parameter.name, parameter.direction) -%}
{%                  if parameter.is_nullable %}
        if {{ formatted_name }} != None:
{%-                 endif %}
        {{ indent }}{{ self::encode_type(parameter.type_.clone(), formatted_name, "common.", parameter.discriminator_name.clone() , "codec", indent, 0)|indent(8) -}}
{%              endif -%}
{%          endfor -%}
{%          if function.return_type.is_some() %}
        {{ self::encode_type(function.return_type.clone().expect("Return type must be set"), "_result", "common.", None, "codec", "", 0)|indent(8) }}
        return _result
{%-         endif %}
{%      endif %}
{%  endfor %}
{%  endfor %}