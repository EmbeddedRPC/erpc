/** 
 * Generated by erpcgen 1.11.0 on Mon Oct  2 14:14:16 2023.
 * 
 * AUTOGENERATED - DO NOT EDIT
 */
package com.nxp.erpc.example.erpc_matrix_multiply.server;

import com.nxp.erpc.example.erpc_matrix_multiply.interfaces.IMatrixMultiplyService;



import com.nxp.erpc.auxiliary.MessageInfo;
import com.nxp.erpc.auxiliary.MessageType;
import com.nxp.erpc.codec.Codec;
import com.nxp.erpc.server.Service;
import com.nxp.erpc.auxiliary.Reference;


import java.util.ArrayList;
import java.util.List;

/**
 * Testing abstract service class for simple eRPC interface.
 */
public abstract class AbstractMatrixMultiplyServiceService
        extends Service
        implements IMatrixMultiplyService {

    /**
     * Default constructor.
     */
    public AbstractMatrixMultiplyServiceService() {
        super(IMatrixMultiplyService.SERVICE_ID);
        addMethodHandler(IMatrixMultiplyService.ERPCMATRIXMULTIPLY_ID, this::erpcMatrixMultiplyHandler);
    }

    private void erpcMatrixMultiplyHandler(int sequence, Codec codec) {
        int[][] matrix1;
        int[][] matrix2;
        Reference<int[][]> result_matrix = new Reference<>();

        matrix1 = new int[5][5];
        for (int genLoopVariable1 = 0; genLoopVariable1 < 5; ++genLoopVariable1)
        {
            int[] genValueVariable1 = new int[5];
            for (int genLoopVariable2 = 0; genLoopVariable2 < 5; ++genLoopVariable2)
            {
                int genValueVariable2 = codec.readInt32();
                genValueVariable1[genLoopVariable2] = genValueVariable2;
            }
            matrix1[genLoopVariable1] = genValueVariable1;
        }
        matrix2 = new int[5][5];
        for (int genLoopVariable1 = 0; genLoopVariable1 < 5; ++genLoopVariable1)
        {
            int[] genValueVariable1 = new int[5];
            for (int genLoopVariable2 = 0; genLoopVariable2 < 5; ++genLoopVariable2)
            {
                int genValueVariable2 = codec.readInt32();
                genValueVariable1[genLoopVariable2] = genValueVariable2;
            }
            matrix2[genLoopVariable1] = genValueVariable1;
        }

        erpcMatrixMultiply(matrix1, matrix2, result_matrix);

        codec.reset();

        codec.startWriteMessage(new MessageInfo(
                MessageType.kReplyMessage,
                getServiceId(),
                IMatrixMultiplyService.ERPCMATRIXMULTIPLY_ID,
                sequence)
        );

        // Read out parameters
        for (int genLoopVariable1 = 0; genLoopVariable1 < 5; ++genLoopVariable1)
        {
            int[] genValueVariable1 = result_matrix.get()[genLoopVariable1];
            for (int genLoopVariable2 = 0; genLoopVariable2 < 5; ++genLoopVariable2)
            {
                int genValueVariable2 = genValueVariable1[genLoopVariable2];
                codec.writeInt32(genValueVariable2);
            }
        }
    }

}

