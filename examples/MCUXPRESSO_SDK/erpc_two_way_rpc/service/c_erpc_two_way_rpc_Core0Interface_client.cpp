/*
 * Copyright 2018,2023 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Generated by erpcgen 1.13.0 on Thu Apr 18 09:37:38 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "c_erpc_two_way_rpc_Core0Interface_client.h"
#include "erpc_two_way_rpc_Core0Interface_client.hpp"
#include "erpc_manually_constructed.hpp"
#include "erpc_utils.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


static const getNumberCallback_t _getNumberCallback_t[1] = { getNumberFromCore1 };

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
Core0Interface_client *s_Core0Interface_client = nullptr;
#else
ERPC_MANUALLY_CONSTRUCTED_STATIC(Core0Interface_client, s_Core0Interface_client);
#endif

void setGetNumberFunction(const getNumberCallback_t getNumberCallbackParam)
{
    uint16_t _fnIndex;
    Core0Interface_interface::getNumberCallback_t _getNumberCallbackParam = NULL;

    if (findIndexOfFunction((arrayOfFunctionPtr_t)_getNumberCallback_t, sizeof(_getNumberCallback_t)/sizeof(getNumberCallback_t), (functionPtr_t)getNumberCallbackParam, _fnIndex))
    {
        Core0Interface_interface::get_callbackAddress_getNumberCallback_t(_fnIndex, &_getNumberCallbackParam);
    }

    s_Core0Interface_client->setGetNumberFunction(_getNumberCallbackParam);
}

void getGetNumberFunction(getNumberCallback_t * getNumberCallbackParam)
{
    uint16_t _fnIndex;
    Core0Interface_interface::getNumberCallback_t _getNumberCallbackParam = NULL;

    s_Core0Interface_client->getGetNumberFunction(&_getNumberCallbackParam);

    if (Core0Interface_interface::get_callbackIdx_getNumberCallback_t(&_getNumberCallbackParam, _fnIndex))
    {
        *getNumberCallbackParam=_getNumberCallback_t[_fnIndex];
    }
}

void nestedCallGetNumber(const getNumberCallback_t getNumberCallbackParam)
{
    uint16_t _fnIndex;
    Core0Interface_interface::getNumberCallback_t _getNumberCallbackParam = NULL;

    if (findIndexOfFunction((arrayOfFunctionPtr_t)_getNumberCallback_t, sizeof(_getNumberCallback_t)/sizeof(getNumberCallback_t), (functionPtr_t)getNumberCallbackParam, _fnIndex))
    {
        Core0Interface_interface::get_callbackAddress_getNumberCallback_t(_fnIndex, &_getNumberCallbackParam);
    }

    s_Core0Interface_client->nestedCallGetNumber(_getNumberCallbackParam);
}

void getNumberFromCore1(uint32_t * number)
{
    s_Core0Interface_client->getNumberFromCore1(number);
}

void initCore0Interface_client(erpc_client_t client)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(s_Core0Interface_client == nullptr);
    s_Core0Interface_client = new Core0Interface_client(reinterpret_cast<ClientManager *>(client));
#else
    erpc_assert(!s_Core0Interface_client.isUsed());
    s_Core0Interface_client.construct(reinterpret_cast<ClientManager *>(client));
#endif
}

void deinitCore0Interface_client(void)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (s_Core0Interface_client != nullptr)
    {
        delete s_Core0Interface_client;
        s_Core0Interface_client = nullptr;
    }
#else
    s_Core0Interface_client.destroy();
#endif
}
