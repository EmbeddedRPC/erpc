/*
 * Copyright 2018,2023 NXP
 * All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

/*
 * Generated by erpcgen 1.13.0 on Thu Apr 18 09:37:38 2024.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "c_erpc_two_way_rpc_Core1Interface_client.h"
#include "erpc_two_way_rpc_Core1Interface_client.hpp"
#include "erpc_manually_constructed.hpp"

using namespace erpc;
using namespace std;
using namespace erpcShim;


#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
Core1Interface_client *s_Core1Interface_client = nullptr;
#else
ERPC_MANUALLY_CONSTRUCTED_STATIC(Core1Interface_client, s_Core1Interface_client);
#endif

void increaseNumber(uint32_t * number)
{
    s_Core1Interface_client->increaseNumber(number);
}

void initCore1Interface_client(erpc_client_t client)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(s_Core1Interface_client == nullptr);
    s_Core1Interface_client = new Core1Interface_client(reinterpret_cast<ClientManager *>(client));
#else
    erpc_assert(!s_Core1Interface_client.isUsed());
    s_Core1Interface_client.construct(reinterpret_cast<ClientManager *>(client));
#endif
}

void deinitCore1Interface_client(void)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    if (s_Core1Interface_client != nullptr)
    {
        delete s_Core1Interface_client;
        s_Core1Interface_client = nullptr;
    }
#else
    s_Core1Interface_client.destroy();
#endif
}
